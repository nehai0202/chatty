{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","_useState","useState","_useState2","_slicedToArray","show","setShow","toast","useToast","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","loading","setLoading","history","useHistory","submitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","localStorage","setItem","JSON","stringify","push","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","children","FormControl","id","isRequired","_jsx","FormLabel","Input","value","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","_useState9","_useState10","_useState11","_useState12","pic","setPic","_useState13","_useState14","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","then","url","toString","catch","error","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","Container","maxW","m","centerContent","Box","d","justifyContent","bg","w","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","_ChatState","handleSearch","_ref2","query","_yield$axios$get","Authorization","token","get","_x","handleRename","_ref3","_callee2","_yield$axios$put","_context2","put","chatId","chatName","handleAddUser","_ref4","_callee3","user1","_yield$axios$put2","_context3","find","u","groupAdmin","_x2","handleRemove","_ref5","_callee4","_yield$axios$put3","_context4","_x3","flexWrap","pb","ml","Spinner","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","_useState15","_useState16","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","_toConsumableArray","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","Lottie","options","marginBottom","role","_focus","outline","top","right","left","Picker","onEmojiClick","emojiObject","prevMsg","emoji","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.6325af96.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    //sending data to backend\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000, \n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n            const config = {\n              headers: {\n                \"Content-type\": \"application/json\",\n              },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n        \n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\"); //logged in push in chats page \n\n\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (pics.type !== \"image/jpeg\" && pics.type !== \"image/png\") {\n      toast({\n        title: \"Please Select a JPEG or PNG Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n\n      const data = new FormData()\n      data.append(\"file\", pics)\n      data.append(\"upload_preset\", \"app_chat\")\n      data.append(\"cloud_name\",\"dww6phj5y\")\n      axios.post(\"https://api.cloudinary.com/v1_1/dww6phj5y/image/upload\", data)\n        .then((response) => {\n          console.log(\"Cloudinary response:\", response);\n          setPic(response.data.url.toString());\n          setPicLoading(false);\n          toast({\n            title: \"Image uploaded successfully!\",\n            status: \"success\",\n            duration: 5000,\n            isClosable: true,\n            position: \"bottom\",\n          });\n        })\n        .catch((error) => {\n          console.log(\"Cloudinary error:\", error);\n          setPicLoading(false);\n        });\n    }\n  }\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" m=\"40px 40px 50px 100px\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport  Picker  from 'emoji-picker-react';\nimport io from \"socket.io-client\";\nimport { BsEmojiSmileFill} from \"react-icons/bs\"\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";// -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [chosenEmoji, setChosenEmoji] = useState(null);\n\n  //const handleemojiPicker=()=>{\n  //  setShowEmojiPicker(!showEmojiPicker);\n  //}\n  const onEmojiClick = (event, emojiObject) => {\n   console.log(\"clicl\");\n    setNewMessage((prevMessage) => prevMessage + emojiObject.emoji);\n  };\n  \n  \n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData, //animationData from ../animations/typing.json\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id); //with id of chat cretae new room\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data); //send the new msg \n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    //start socket.io\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user); ///inform the server about the user's setup\n    socket.on(\"connected\", () => setSocketConnected(true));//as soon as it returns something socket connected=true\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n   \n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;///to keep backup of selectedChat in selectedchatcompare and decide fi we have to emit messsage or give notification\n    \n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) { //give notifications since selectedchat doesnot match thenewRecemsh chatid\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain); //update list of chat\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) { //typing not going on\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id); //send in selctedchatid room\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000; //after 3 sec \n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  \n\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            > \n              {istyping ? (\n                <div>  \n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    //setting dots earliew written loading\n                    //npm i react-lottie\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n\n              \n<IconButton\n  icon={<span role=\"img\" aria-label=\"emoji\">😊</span>}\n\n  onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n  alignSelf=\"fixed\"\n  bg=\"transparent\"\n  _hover={{ bg: 'transparent' }}\n  _focus={{ outline: 'none' }}\n  mt={2}\n  mr={2}\n/>\n\n{showEmojiPicker && (\n <div style={{ position: 'absolute', top: '52px', right: '0',left:'-7px' }}>\n                <Picker onEmojiClick={(emojiObject)=> \n    setNewMessage((prevMsg)=> prevMsg + emojiObject.emoji)}/> \n                </div>\n)}\n\n<Input\n  variant=\"filled\"\n  bg=\"#E0E0E0\"\n  placeholder=\"Enter a message..\"\n  value={newMessage}\n  onChange={typingHandler}\n  w=\"90%\"\n  \n/>\n\n\n        \n\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n//whatever state we create here is accesssible to whole of app by useContext hook\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => { //fetch local storage since in stringify sp parse\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n   \n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user,handleFunction }) => {\n  \n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n//destructure data\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              \n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));//filter out notifiction and redirected\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}